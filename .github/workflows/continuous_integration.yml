name: Continuous integration

# Running on the branch main and on all PRs
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # TODO: Split this job in multiple jobs to group similar tasks together (like setup, audit dependencies, format, lint, tests, etc...)
  continuous_integration:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Elixir and OTP
        uses: erlef/setup-beam@v1.15
        id: setup-beam
        with:
          otp-version: '25'
          elixir-version: '1.14.2'

      # Whenever a cache hit occurs for the exact `key` match defined below, this step sets the `cache-hit` outputs to 'true'.
      # With `if: steps.cache.outputs.cache-hit != 'true'`, this can be used in steps to run or ignore them based on the cache hit.
      # A partial key match via `restore-keys` or a cache miss will set `cache-hit` to 'false'.
      - name: Restore dependencies from cache if possible
        uses: actions/cache@v3
        id: cache # To expose the `cache-hit` output through `steps.cache.outputs.cache-hit`
        env:
          cache-name: mix-${{ runner.os }}-${{ steps.setup-beam.outputs.otp-version }}-${{ steps.setup-beam.outputs.elixir-version }}-
        with:
          path: |
            deps # Where Mix downloads dependencies
            _build # # Where Mix stores compiled artifacts
          key: ${{ env.cache-name }}${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ env.cache-name }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: Find unused dependencies # https://hexdocs.pm/mix/Mix.Tasks.Deps.Unlock.html
        run: mix deps.unlock --check-unused

      - name: Check for retired dependencies # https://hexdocs.pm/hex/Mix.Tasks.Hex.Audit.html
        run: mix hex.audit

      - name: Check for vulnerable dependencies # https://github.com/mirego/mix_audit
        run: mix deps.audit

      - name: Check format of Elixir code # https://hexdocs.pm/mix/main/Mix.Tasks.Format.html
        run: mix format --dry-run --check-formatted

      - name: Lint Elixir code # Credo's strict analysis: https://hexdocs.pm/credo/basic_usage.html#strict-analysis
        run: mix credo --strict
